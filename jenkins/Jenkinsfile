pipeline {
	agent {
		kubernetes {
			defaultContainer 'buildpack'
			yaml '''
kind: Pod
spec:
  containers:
  - name: buildpack
    image: maxmorhardt/topfilms-jenkins-buildpack:latest
    imagePullPolicy: Always
    securityContext:
      privileged: true
'''
		}
	}

	parameters {
		string(name: 'BRANCH', defaultValue: params.BRANCH ?: 'main', description: 'Branch to checkout in k8s repo')
	}

	environment {
		APP_NAME = 'jenkins'
		GITHUB_URL = 'https://github.com/Top-Films/k8s'
	}

	stages {

		stage('Git Clone') {
			steps {
				script {
					checkout scmGit(
						branches: [[
							name: "${params.BRANCH}"
						]],
						userRemoteConfigs: [[
							credentialsId: 'github',
							url: "${env.GITHUB_URL}"
						]]
					)

					sh 'ls -lah'
				}
			}
		}

		stage('File Substitutions with Secrets') {
			steps {
				script {
					withCredentials([
						usernamePassword(credentialsId: 'jenkins-admin-credentials', usernameVariable: 'JENKINS_ADMIN_USERNAME', passwordVariable: 'JENKINS_ADMIN_PASSWORD'),
						string(credentialsId: 'jenkins-client-id', variable: 'JENKINS_CLIENT_ID'),
						string(credentialsId: 'jenkins-client-secret', variable: 'JENKINS_CLIENT_SECRET')
					]) {
						sh '''
							cd $APP_NAME

							sed -i 's/<JENKINS_ADMIN_USERNAME>/$JENKINS_ADMIN_USERNAME/g' values.yaml
							sed -i 's/<JENKINS_ADMIN_PASSWORD>/$JENKINS_ADMIN_PASSWORD/g' values.yaml
							sed -i 's/<JENKINS_CLIENT_ID>/$JENKINS_CLIENT_ID/g' values.yaml
							sed -i 's/<JENKINS_CLIENT_SECRET>/$JENKINS_CLIENT_SECRET/g' values.yaml
						'''
					}
				}
			}
		}

		stage('Deploy Jenkins') {
			steps {
				script {
					withCredentials([
						file(credentialsId: 'kube-config', variable: 'KUBE_CONFIG'),
						file(credentialsId: 'ca-cert', variable: 'CA_CERT'),
						file(credentialsId: 'ca-cert-private-key', variable: 'CA_CERT_PRIVATE_KET')
					]) {
						sh 'mkdir -p $WORKSPACE/.kube && cp $KUBE_CONFIG ${WORKSPACE}/.kube/config'

						sh '''
							cd $APP_NAME

							cp $CA_CERT cert.pem
							cp $CA_CERT_PRIVATE_KET key.pem
						'''

						sh """
							cd $APP_NAME

							kubectl create secret tls jenkins.topfilms.io-tls --cert=cert.pem --key=key.pem -n $APP_NAME

							kubectl apply -f storage.yaml
							kubectl apply -f sa.yaml

							helm repo add $APP_NAME https://charts.jenkins.io
							helm repo update
							helm upgrade $APP_NAME jenkinsci/jenkins -f values.yaml --install --atomic --debug --history-max=3 --namespace $APP_NAME
						"""
					}
				}
			}
		}

	}
}