pipeline {
	agent {
		kubernetes {
			defaultContainer 'buildpack'
			yaml '''
kind: Pod
spec:
  containers:
  - name: buildpack
    image: maxmorhardt/topfilms-jenkins-buildpack:latest
    imagePullPolicy: Always
    securityContext:
      privileged: true
'''
		}
	}

	parameters {
		string(name: 'BRANCH', defaultValue: params.BRANCH ?: 'main', description: 'Branch to checkout in k8s repo', trim: true)
		booleanParam(name: 'DEPLOY_CA_CERT', defaultValue: false, description: 'Deploy ca cert as secret to k8s')
		booleanParam(name: 'SKIP_PROMETHEUS', defaultValue: false, description: 'Skips prometheus cd')
		booleanParam(name: 'SKIP_GRAFANA', defaultValue: false, description: 'Skips grafana cd')
		booleanParam(name: 'SKIP_LOKI', defaultValue: false, description: 'Skips loki cd')
	}

	environment { 
		GITHUB_URL = 'https://github.com/Top-Films/k8s'
	}

	stages {

		stage('Git Clone') {
			steps {
				script {
					checkout scmGit(
						branches: [[
							name: "$BRANCH"
						]],
						userRemoteConfigs: [[
							credentialsId: 'github',
							url: "$GITHUB_URL"
						]]
					)

					sh 'ls -lah'
				}
			}
		}
		
		stage('Deploy CA Cert') {
			when {
				expression { 
					DEPLOY_CA_CERT == "true"
				}
			}
			steps {
				script {
					withCredentials([
						file(credentialsId: 'ca-cert', variable: 'CA_CERT'),
						file(credentialsId: 'ca-cert-private-key', variable: 'CA_CERT_PRIVATE_KEY'),
						file(credentialsId: 'kube-config', variable: 'KUBE_CONFIG')
					]) {
						sh 'mkdir -p $WORKSPACE/.kube && cp $KUBE_CONFIG $WORKSPACE/.kube/config'

						sh '''
							cp $CA_CERT $WORKSPACE/cert.pem
							cp $CA_CERT_PRIVATE_KEY $WORKSPACE/key.pem

							ls -lah

							set +e

							kubectl delete secret prometheus.topfilms.io-tls --namespace observability
							kubectl create secret tls prometheus.topfilms.io-tls --cert=cert.pem --key=key.pem --namespace observability

							kubectl delete secret grafana.topfilms.io-tls --namespace observability
							kubectl create secret tls grafana.topfilms.io-tls --cert=cert.pem --key=key.pem --namespace observability

							set -e
						'''
					}
				}
			}
		}

		stage('Prometheus CD') {
			when {
				expression { 
					SKIP_PROMETHEUS == "false"
				}
			} 
			steps {
				script {
					withCredentials([file(credentialsId: 'kube-config', variable: 'KUBE_CONFIG')]) {
						sh 'mkdir -p $WORKSPACE/.kube && cp $KUBE_CONFIG $WORKSPACE/.kube/config'

						sh """
							cd observability
							
							helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
							helm repo update
							helm upgrade prometheus prometheus-community/prometheus --values prometheus-values.yaml --install --atomic --debug --history-max=3 --namespace observability
						"""
					}
				}
			}
		}

		stage('Grafana CD') {
			when {
				expression { 
					SKIP_GRAFANA == "false"
				}
			} 
			steps {
				script {
					withCredentials([file(credentialsId: 'kube-config', variable: 'KUBE_CONFIG')]) {
						sh 'mkdir -p $WORKSPACE/.kube && cp $KUBE_CONFIG $WORKSPACE/.kube/config'

						sh """
							cd observability

							helm repo add grafana https://grafana.github.io/helm-charts 
							helm repo update
							helm upgrade grafana grafana/grafana --values grafana-values.yaml --install --atomic --debug --history-max=3 --namespace observability
						"""
					}
				}
			}
		}

		stage('Loki CD') {
			when {
				expression { 
					SKIP_LOKI == "false"
				}
			} 
			steps {
				script {
					withCredentials([file(credentialsId: 'kube-config', variable: 'KUBE_CONFIG')]) {
						sh 'mkdir -p $WORKSPACE/.kube && cp $KUBE_CONFIG $WORKSPACE/.kube/config'

						sh """
							cd observability

							helm repo add grafana https://grafana.github.io/helm-charts 
							helm repo update
							helm upgrade loki grafana/loki --values values.yaml --install --atomic --debug --history-max=3 --namespace observability
						"""
					}
				}
			}
		}

	}
}